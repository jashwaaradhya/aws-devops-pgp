#!/bin/bash

##################################################################
#Step-1: START SERVER

sudo chmod 644 /lib/systemd/system/mypythonservice.service

sudo systemctl daemon-reload

sudo systemctl stop pythonappy.service

sudo systemctl start pythonappy.service

###################################################################
#Step-2: INSTALL EKS TOOLS

sudo apt-get update

sudo apt-get install unzip

curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install

curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.25.6/2023-01-30/bin/linux/amd64/kubectl
sudo chmod +x ./kubectl
sudo mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc

curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
sudo mv /tmp/eksctl /usr/local/bin


#####################################################################
#Step-3: SETUP EKS CLUSTER

sudo rm ~/.kube/config

#aws confgiure with IAM accessID, Secret and Region
aws configure set region us-west-2 --profile default
aws configure set aws_access_key_id AKIAUDMZZTUBIKSWLRWM --profile default
aws configure set aws_secret_access_key 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 --profile default

if (!(aws eks list-clusters | grep Final))
then

#create a cluster called Final with fargate nodes
eksctl create cluster --name Final --version 1.25 --fargate

#Associate iam odc provider
eksctl utils associate-iam-oidc-provider --cluster Final --approve

#Download Iam policy for eks cluster
curl -o iam_policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.4.4/docs/install/iam_policy.json

#Create the downloaded Iam Policy in aws
aws iam create-policy \
   --policy-name AWSLoadBalancerControllerIAMPolicy \
   --policy-document file://iam_policy.json

#Create a service account using cloud watch for eks aws-load-balancer controller
eksctl create iamserviceaccount \
  --cluster=Final \
  --namespace=kube-system \
  --name=aws-load-balancer-controller \
  --attach-policy-arn=arn:aws:iam::282179771650:policy/AWSLoadBalancerControllerIAMPolicy \
  --override-existing-serviceaccounts \
  --approve

#Verify the service account
eksctl get iamserviceaccount --cluster Final --name aws-load-balancer-controller --namespace kube-system

#Add eks helm chart
sudo helm repo add eks https://aws.github.io/eks-charts

#Add aws load balancer containers
kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller//crds?ref=master"

#Set context to created cluster
aws eks update-kubeconfig --region us-west-2 --name Final

#Get the ID of the VPC created during cluster creation
ID=`aws ec2 describe-vpcs --filter Name=tag:Name,Values=eksctl-Final-cluster/VPC --query Vpcs[].VpcId --output text`

#Install Aws LoadBalancer controller in teh cluster
sudo helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
    --set clusterName=Final \
    --set serviceAccount.create=false \
    --set region=us-west-2 \
    --set vpcId=$ID \
    --set serviceAccount.name=aws-load-balancer-controller \
    -n kube-system

else
# Do nothing, the cluster is already present
echo Cluster already present
fi

###########################################################################
#Step-4: PUSH FLASKAPP CONTAINER TO DOCKERHUB

sudo apt-get update
sudo docker build /home/ubuntu/aws-devops-pgp -t flaskapp
sudo docker run -it -p 85:80 -d --name flaskapp flaskapp
sudo docker login -u jashwa -p Jashkpit070!!
sudo docker commit flaskapp jashwa/flaskapp
sudo docker push jashwa/flaskapp
sudo docker rm -vf $(sudo docker ps -aq)
sudo docker rmi -f $(sudo docker images -aq)
aws eks update-kubeconfig --region us-west-2 --name Final


###########################################################################
#Step-5: DEPLOY CONTAINER TO EKS CLUSTER

if (eksctl get fargateprofile --cluster Final | grep Game2048)

then
echo Profile exists !

kubectl apply -f /home/ubuntu/aws-devops-pgp/capcustom.yaml

else
echo Creating fargate profile !

eksctl create fargateprofile --cluster Final --region us-west-2 --name Game2048 --namespace game-2048

kubectl apply -f /home/ubuntu/aws-devops-pgp/capcustom.yaml
fi
